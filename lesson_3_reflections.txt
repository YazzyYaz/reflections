Q1) When would you want to use a remote repository rather than keeping all your work local?

When you are using another computer and want to access the repository, it's much easier to have it
remote so that you don't need to be on the same computer to access it. Also, let's say you are
working with other collaboraters on a large project, having access and using a remote repository
is much more convenient since everyone can have access to it wherever they are and start making
changes to it.


Q2) Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

Because sometimes you don't want to update from the remote branch, especially if other
people are working on it, because then automatically staying up to date with the remote
branch will mean that your local work might get lost since it's not synchronized with
the remote branch. Furthermore, by adding files directly on the remote branch, you might
want to not pull them automatically and have to do some changes to them before pulling them.
Having that control of not automatically being synchronized with remote gives you more control
over your local working directory and protects it from information being lost in synchronization.


### NOTES ###

git remote add 'branch-name' 'https link' 	Adds a remote branch to your working directory. Branch Name
should be called 'origin'. HTTPS Link will be found when you create a remote repository in github.

git push 'remote-branch-name' 'local-branch-name'	Pushes local changes to
remote repository.
'remote-branch-name' is actually 'origin'. 'local-branch-name' is 'master'

git pull 'remote-branch-name' 'local-branch-name'	Pulls remote change to
local repository.
'remote-branch-name' is actually 'origin'. 'local-branch-name' is 'master'

git clone 'https-link' 		Clones a remote repository to your local directory.
It also points to the remote
repository automatically when you do so.

#############



Q3) Describe the differences between forks, clones, and branches. When would you use one
instead of another?

Clones are used to clone a remote repository into your local directory, or clone one
local directory to another. Forks are clones on Github's servers to clone between remote
repositories while attributing the original repository that was forked from in the first place.
Branches are different versions of a master repository that used to make changes while keeping
the master the same way it is. I use forks when cloning another person's github repository, I clone
it to my local machine when I want to edit it locally, I can push the changes back to my remote
repository. I can then Branch on master in my local if I want to do experimental features.


# CODE INSTRUCTION #

git pull origin master 		= git fetch origin 		Followed by: git merge master origin/master
git branch -a 	Shows you which branch you're on and the other branches available


Q4) What is the benefit of having a copy of the last known state of the remote stored locally?

It helps you keep the most recent version of the commit in your local directory to be able to work on
when there is no internet connection, and that way, if since you were offline, changes have been made to the
remote repository, you can easily fetch and merge the new updates into your local directory when you have
internet connection again.

Q5) How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?

You'd have to e-mail each other with code changes, have lots of different versions of the code, have to go
back and forth between each other, and store everything on a Google Docs page or another shared
document. It wouldn't be easier at all to collaborate on code without Git or GitHub, especially
since you lose the value of having version-control and being able to merge different code structures together.