What happens when you initialize a repository? Why do you need to do it?

Git creates a .git hidden file to begin version controlling that directory, making the repository. You need to initialize git in that directory in order to begin version controlling your workflow.


How is the staging area different from the working directory and the repository? What value do you think it offers?

It allows you to control what you want to commit. For example, let's say you want to commit changes you've made in multiple files, for different functions. It's better to add some files related to each other to staging are and commit them, and then add other files connected in a different way altogether and commit those later.


git diff 'file_old' 'file_new' helps finding difference between two COMMITS!
git diff on it's own finds the difference between working directory and staging area.
git diff --staged finds difference between staging area and commit repository

git reset --hard   resets any changes in working directory or staging area.


How can you use the staging area to make sure you have one commit per logical change?

In the staging area, you add the files you want for the logical change you have made, even though you have been working with other files. That way, you prepare the files for the logical change to be committed under a message, while later on staging other files for other logical changes.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful when I want to explore a bug found in a current version, look at where that bug was made, branch out on that commit, fix that bug, then merge it back to the most recent version of the commit repository. Branches help me play around with experimental features and other things while keeping my main repository organized and unaffected.